package lesson5;

import java.util.Arrays;

public class FifthLesson {
    public static void main(String[] args) {

        // char - –ø—Ä–∏–º–∏—Ç–∏–≤–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö 16 –±–∏—Ç–Ω—ã–π —Å–∏–º–≤–æ–ª Unicode
        // –æ—Ç 0 –¥–æ 65536 / '\u0000' –¥–æ '\uffff'

        char char1 = 'J'; // char - mandatory with single quote
        char char2 = 74;
        char char3 = '\u0044';

        System.out.println(char1);
        System.out.println("\n–°—Ç—Ä–æ–∫–∏");

        // –°—Ç—Ä–æ–∫–∞ - —É–ø–æ—Ä—è–¥–æ—á–µ–Ω–Ω–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–∏–º–≤–æ–ª–æ–≤
        // –°—Ç—Ä–æ–∫–∞ - —Å—Å—ã–ª–æ—á–Ω—ã–π —Ç–∏–ø, —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ String
        // –°—Ç—Ä–æ–∫–∏ –∑–∞–¥–∞—é—Ç—Å—è:
        // 1. –≤ –¥–≤–æ–π–Ω—ã—Ö –∫–∞–≤—ã—á–∫–∞—Ö
        // 2. new String() - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –≤ —Ç–æ–º —Å–ª—É—á–∞–µ, –∫–æ–≥–¥–∞
        // –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –∏—Å–ø–ª—å–∑–æ–≤–∞—Ç—å –¥–≤–æ–π–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏
        // –°—Ç—Ä–æ–∫–∏ –Ω–µ–∏–∑–º–µ–Ω–Ω—ã, –º–æ–∂–Ω–æ –ª–∏—à—å —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é  —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π

        System.out.println("–°—Ç—Ä–æ–∫–æ–≤—ã–π –ª–∏—Ç–µ—Ä–∞–ª"); // –≠—Ç–æ —Ç–æ–∂–µ —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ string, –Ω–æ –Ω–∞ –Ω–µ–≥–æ –Ω–µ–ª—å–∑—è —Å–æ—Å–ª–∞—Ç—å—Å—è

        char[] chars = {'\u004A', '\u004A', '\u0044'};
        String jjdString = new String(chars);
        System.out.println(jjdString);
        System.out.println(jjdString.length());

        char[] chars1 = {'\uD83D', '\uDC38'}; // —Å—É—Ä—Ä–æ–≥–∞—Ç–Ω–∞—è –ø–∞—Ä–∞ —á–∞—Ä–æ–≤
        String frogString = new String(chars1);
        System.out.println(frogString); // üê∏
        System.out.println(frogString.length());

        System.out.println(frogString.codePoints().count());

        // –•—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫ –¥–æ JAVA 9: –º–∞—Å—Å–∏–≤ char[] –≤ –∫–æ–¥–∏—Ä–æ–≤–∫–µ UTF-16
        // –ö–∞–∂–¥—ã–π —á–∞—Ä –±—ã–ª –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω –¥–≤—É–º—è –±–∞–π—Ç–∞–º–∏

        // –ù–∞—á–∏–Ω–∞—è —Å 9 –≤–µ—Ä—Å–∏–∏ —Å—Ç—Ä–æ–∫–∏ (–∫–æ–º–ø–∞–∫—Ç–Ω—ã–µ —Å—Ä–æ–∫–∏) —Ö—Ä–∞–Ω—è—Ç—å—Å—è –∫–∞–∫ –º–∞—Å—Å–∏–≤
        // byte[] + –∫–æ–¥–∏—Ä–æ–≤–∫–∞ LATIN1 –∏–ª–∏ UTF-16

        // –ü—É–ª —Å—Ç—Ä–æ–∫ —Ö—Ä–∞–Ω–∏—Ç —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É –∫–æ–ø–∏—é —Å—Ç—Ä–æ–∫–æ–≤–æ–≥–æ –ª–∏—Ç–µ—Ä–∞–ª–∞
        // –í –ø—É–ª–µ —Å—Ç—Ä–æ–∫ –≤—Å–µ–≥–¥–∞ —Ö—Ä–∞–Ω—è—Ç—å—Å—è —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
        // –ü—É–ª —Å—Ç—Ä–æ–∫:

        String string1 = "–°—Ç—Ä–æ–∫–∞";  // –ü—É–ª —Å—Ç—Ä–æ–∫: "–°—Ç—Ä–æ–∫–∞"
        String string2 = "–°—Ç—Ä–æ–∫–∞";  // –ü—É–ª —Å—Ç—Ä–æ–∫: "–°—Ç—Ä–æ–∫–∞"
        String string3 = new String("–°—Ç—Ä–æ–∫–∞");  // –¢–∞–∫ —Å—Ç—Ä–æ–∫–∞ –Ω–µ –ø–æ–ø–∞–¥–∞–µ—Ç –≤ –ø—É–ª —Å—Ç—Ä–æ–∫, –Ω–æ —Å–æ–∑–¥–∞–µ—Ç—Å—è –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç

        System.out.println(string1 == string2);
        System.out.println(string1 == string3);
        System.out.println(string1.equals(string3));

        String internString = string3.intern(); // –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ç—Ä–æ–∫—É –∏–∑ –ø—É–ª–∞,
        // –ª–∏–±–æ –µ—Å–ª–∏ –æ–Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, —Ç–æ –¥–æ–±–∞–≤–ª—è–µ—Ç –µ—ë –≤ –ø—É–ª –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç

        System.out.println(internString);

        string1 = "–°—Ç—Ä–æ–∫–∞";
        string2 = "–°—Ç—Ä–æ–∫–∞";

        // —Å—Ç—Ä–æ–∫–∏ –Ω–µ —Å—Ä–∞–≤–Ω–∏–≤–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ == —Ç–∞–∫–∂–µ –∫–∞–∫ –∏ –ª—é–±—ã–µ –¥—Ä—É–≥–∏–µ —Å—Å—ã–ª–æ—á–Ω—ã–µ —Ç–∏–ø—ã - —Ç–∞–∫ –ø–æ–ª—É—á–∞–µ—Ç—Å—è —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫, –∞ –Ω–µ —Å–∞–º–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤
        // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫ equals

        System.out.println(string1.equals(string2));
        System.out.println("—Å—Ç—Ä–æ–∫–∞".equals(string2));
        System.out.println("—Å—Ç—Ä–æ–∫–∞".equalsIgnoreCase(string2));

        string2 = null;

        System.out.println("—Å—Ç—Ä–æ–∫–∞".equals(string2));
        // System.out.println(string2.equals("—Å—Ç—Ä–æ–∫–∞")); // –û—à–∏–±–∫–∞ NullPointerException –ø–æ—è–≤–ª—è–µ—Ç—Å—è –∫–æ–≥–¥–∞ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è
        // –º–µ—Ç–æ–¥ –ª–∏–±–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Ç–æ—á–Ω–∏—Ç—å —Å–≤–æ–π—Å—Ç–≤–æ —É null

        System.out.println(string2 == null); // true
        System.out.println(string2 != null); // false

        string1 = "Java";
        string2 = "Python";

        // –∫–æ–Ω–∫–∞—Ç–µ–Ω–∞—Ü–∏—è —Å—Ç—Ä–æ–∫

        String concatString = string1 + " :: " + string2;
        System.out.println(concatString);

        concatString = string1.concat(" :: ");
        System.out.println(concatString);
        concatString = string1.concat(" :: ").concat(string2);
        System.out.println(concatString);

        concatString = String.join(" :: ", string1, string2, string3);
        System.out.println(concatString);

        StringBuilder concatStringBuilder = new StringBuilder();
        for (int i = 0; i < 10; i++) {
            concatStringBuilder.append(i); // —Ç–∞–∫ –¥–µ–ª–∞—Ç—å –Ω–µ–ª—å–∑—è —Ç–∞–∫–∞–∫ –Ω–∞ –∫–∞–∂–¥–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
            // —Å–æ–∑–¥–∞–µ—Ç—Å—è –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç
        }
        concatString = concatStringBuilder.toString();

        System.out.println(concatString);

        // StringBuilder - —Ä–∞–±–æ—Ç–∞–µ—Ç –±—ã—Å—Ç—Ä–µ–µ
        // StringBuffer - –ø–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω—ã–π
        // –ö–æ–Ω–∫–∞—Ç–µ–Ω–∞—Ü–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –º–µ—Ç–æ–¥–æ–≤ –≤—ã—à–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç –∏–∑–±–µ–∂–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤

        concatString = "–ù–∞—á–∞–ª–æ —Å—Ç—Ä–æ–∫–∏ ";
        StringBuilder sb = new StringBuilder(concatString);

        sb.append(string1);
        System.out.println(sb);

        sb.append(string1).append(" :: ").append(string2);
        System.out.println(sb);

        StringBuilder sb2 = new StringBuilder();
        for (int i = 0; i < 10; i++) {
            sb2.append(i).append(" ");
        }

        String sbString = sb2.toString();
        System.out.println(sbString);

        // –º–µ—Ç–æ–¥ split

        String langs = "Java, Python, JavaScript";
        String[] langArr = langs.split(", ");
        System.out.println(Arrays.toString(langArr));
        System.out.println(langArr[1]);

        // –º–µ—Ç–æ–¥—ã –∑–∞–º–µ–Ω—ã
        String newString = langs.replaceAll(", ", " - ");
        System.out.println(newString);

        newString = langs.replaceFirst(", ", " - ");
        System.out.println(newString);

        newString = langs.replace(", ", " - ");
        System.out.println(newString);

        System.out.println(langs.contains(", ")); // –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å—Ç—Ä–æ–∫–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–∏–º–≤–æ–ª–æ–≤ - true/false
        System.out.println(langs.startsWith("Ja")); // –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞—á–∏–Ω–∞–µ—Ç –ª–∏ —Å—Ç—Ä–æ–∫–∞ —Å –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ - true/false
        System.out.println(langs.endsWith("ipt"));// –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é - true/false
        System.out.println(langs.startsWith("Ja",1)); // –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –Ω–∞—á–∏–Ω–∞—è —Å —Å–∏–º–≤–æ–ª–∞ –ø–æ–¥ –∏–Ω–¥–µ–∫—Å–æ–º 1 (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 0)
        // –≤—Å–µ –≤—ã—à–µ —Ä–µ–≥–∏—Å—Ç—Ä–æ–∑–∞–≤–∏—Å–∏–º—ã–µ


    }
}
